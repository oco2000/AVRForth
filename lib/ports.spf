\ ================== IO Ports ====================

TREQUIRE C@
TREQUIRE C!
TREQUIRE AND

[F]

\ port structure
0x0
CELL -- port
CELL -- ddr
CELL -- pin
DROP

\ Port definition
: PORT ( port ddr pin -- )
  CREATE ROT , SWAP , ,
  DOES>
;
\ get the DDR
: {DDR} ( 'port -- ddr )
  ddr @
;
\ get the PIN
: {PIN} ( 'port -- pin )
  pin @
;
\ get the PORT
: {PORT} ( 'port -- port )
  port @
;

\ define the bits
: PORTx.x ( bit port -- bit+1 port )
  2DUP SWAP EXP2 SWAP 2CONSTANT
  SWAP 1+ SWAP
;

[DEFINED] PORTA [IF]
  PORTA DDRA PINA   PORT {PORTA}
  00 {PORTA}
    PORTx.x PA0
    PORTx.x PA1
    PORTx.x PA2
    PORTx.x PA3
    PORTx.x PA4
    PORTx.x PA5
    PORTx.x PA6
    PORTx.x PA7
  2DROP
[THEN]

[DEFINED] PORTB [IF]
  PORTB DDRB PINB   PORT {PORTB}
  00 {PORTB}
    PORTx.x PB0
    PORTx.x PB1
    PORTx.x PB2
    PORTx.x PB3
    PORTx.x PB4
    PORTx.x PB5
    PORTx.x PB6
    PORTx.x PB7
  2DROP
[THEN]

[DEFINED] PORTC [IF]
  PORTC DDRC PINC   PORT {PORTC}
  00 {PORTC}
    PORTx.x PC0
    PORTx.x PC1
    PORTx.x PC2
    PORTx.x PC3
    PORTx.x PC4
    PORTx.x PC5
    PORTx.x PC6
    PORTx.x PC7
  2DROP
[THEN]

[DEFINED] PORTD [IF]
  PORTD DDRD PIND   PORT {PORTD}
  00 {PORTD}
    PORTx.x PD0
    PORTx.x PD1
    PORTx.x PD2
    PORTx.x PD3
    PORTx.x PD4
    PORTx.x PD5
    PORTx.x PD6
    PORTx.x PD7
  2DROP
[THEN]

[DEFINED] PORTE [IF]
  PORTE DDRE PINE   PORT {PORTE}
  00 {PORTE}
    PORTx.x PE0
    PORTx.x PE1
    PORTx.x PE2
    PORTx.x PE3
    PORTx.x PE4
    PORTx.x PE5
    PORTx.x PE6
    PORTx.x PE7
  2DROP
[THEN]

[DEFINED] PORTF [IF]
  PORTF DDRF PINF   PORT {PORTF}
  00 {PORTF}
    PORTx.x PF0
    PORTx.x PF1
    PORTx.x PF2
    PORTx.x PF3
    PORTx.x PF4
    PORTx.x PF5
    PORTx.x PF6
    PORTx.x PF7
  2DROP
[THEN]

\ ================== wire groups ====================

: ?ONE_PORT ( port1 port2 -- )
  <> ABORT" Only one port in a group is allowed"
;

\ wire group start
: GROUP{      ( -- -1 )
  ?TEXEC -01
;

\ wire group end
: }GROUP      ( -1 mask0 port0 mask1 port1 .. maskx portx -- )
  CREATE
    DUP >R ( R: port )
    00 BEGIN ( mask )
      OVER -01 <>
    WHILE
      SWAP R@ ?ONE_PORT
      OR
    REPEAT
    R> , ,
    DROP
    \ n portn bitn  ...  port0 bit0
  DOES>   ( mask port )
    2@
;

\ add a group to another group
: +GROUP     ( mask1 port1 mask2 port2 -- mask port )
  ROT OVER ?ONE_PORT
  -ROT OR SWAP
;

\ subtract a group from another one
: -GROUP     ( mask1 port1 mask2 port2 -- mask port )
  ROT OVER ?ONE_PORT
  -ROT INVERT AND SWAP
;

\ a wire
: WIRE
  2CONSTANT
;

\ compile PORT of a group as a literal
: {GROUP.PORT} ( mask port -- )
  NIP T-STATE @ IF
    {PORT} [T] LITERAL [P]
  THEN
;

\ compile MASK of a group as a literal
: {GROUP.MASK} ( mask port -- )
  DROP T-STATE @ IF
    [T] LITERAL [P]
  THEN
;

\ compile MASK of a group as a literal and leave PORT on the stack
: ,MASK     ( mask port -- port )
  ?TCOMP
  SWAP [T] LITERAL [P]
;

[P]

\ set group bits
:: {SET} ( mask port -- )
  ?TCOMP ,MASK {PORT} LITERAL SET
;;

\ toggle group bits
:: {TOGGLE} ( mask port -- )
  ?TCOMP ,MASK {PORT} LITERAL TOGGLE
;;

\ clear group bits
:: {CLEAR} ( mask port -- )
  ?TCOMP ,MASK {PORT} LITERAL CLEAR
;;

\ set wires for output
:: {OUTPUT} ( mask port -- )
  ?TCOMP ,MASK {DDR} LITERAL SET
;;

\ set wires for input
:: {INPUT} ( mask port -- )
  ?TCOMP ,MASK {DDR} LITERAL CLEAR
;;

\ set pull_up for wires
:: {PULL_UP} ( mask port -- )
  {SET}
;;

\ read value from the PORT
:: {READ} ( mask port -- )
          ( T: -- c )
  ?TCOMP {PIN} LITERAL C@ [F] DROP [P]
;;

\ read value from the PORT and mask it
:: {GET} ( mask port -- )
              ( T: -- c )
  ?TCOMP {PIN} LITERAL C@ LITERAL AND
;;

\ write a byte to the PORT
:: {WRITE} ( mask port -- )
          ( T: c -- )
  ?TCOMP {PORT} LITERAL C! [F] DROP [P]
;;

\ read a byte from the PIN
:: PORT.READ ( port -- )
              ( T: -- c )
  ?TCOMP {PIN} LITERAL C@
;;

\ write a byte to the PORT
:: PORT.WRITE ( port -- )
              ( T: c -- )
  ?TCOMP {PORT} LITERAL C!
;;
