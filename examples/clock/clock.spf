\ Часы на семисегментных индикаторах
\ с динамической индикацией
\ для ATMega8
\ +DEBUG3
[F] DECIMAL [P]

8000000 == F_CPU
\ определения портов
REQUIRE {SET}     lib/ports.spf

{PORTD} FCONST SEGMENTS_PORT  \ сегменты
{PORTC} FCONST DIGITS_PORT    \ порт, к которому подключены общие аноды\катоды
04      == #DIGITS        \ количество разрядов
GROUP{ PC0 PC1 PC2 PC3 }GROUP {DIGITS}    \ разряды подключены к младшим битам порта


\ обязательно надо определить порт с кнопками для buttons.spf
PB5 WIRE BTN_SET              \  сами кнопки
PB6 WIRE BTN_+
PB7 WIRE BTN_-

GROUP{ BTN_SET BTN_+ BTN_- }GROUP BUTTONS

REQUIRE DS1307      lib/ds1307.spf    \ библиотека для DS1307
REQUIRE RTOS_INIT_TIMER  lib/eertos/atmega8-eertos-config.spf
REQUIRE RTOS_INIT   lib/eertos/eertos.spf    \ ОС
REQUIRE DEBOUNCE    lib/buttons.spf   \ обработка кнопок
REQUIRE СVECTOR     lib/cvector.spf   \ массив
REQUIRE WDR         lib/wdt.spf       \ сторожевой таймер
REQUIRE MS          lib/delay.spf     \ задержка

00 BIT  == a  \ Эти константы содержат числа, соответствующие двойке,
01 BIT  == b  \ возведенной в степень, равной номеру "ножки" того
02 BIT  == c  \ порта, к которому подключен сегмент индикатора с
03 BIT  == d  \ одноименным макросу названием. Для того, чтобы вывести
04 BIT  == e  \ какую-либо цифру на индикатор, нужно отправить в порт
05 BIT  == f  \ сумму соответствующих сегментам констант.
06 BIT  == g  \ Эти числа позволяют сделать программу независимой от подключения.
07 BIT  == dp \ Измените эти числа, если индикатор выводит букву "зю"

TCREATE SEGMENTS
[F]
 a b c d e f   + + + + +   ( INVERT ) TC,  \ 0 \ Если индикатор с общим анодом,
 b c           +           ( INVERT ) TC,  \ 1 \ нужно сумму констант инвертировать.
 a b g e d     + + + +     ( INVERT ) TC,  \ 2 \ Если с общим катодом, то
 a b g c d     + + + +     ( INVERT ) TC,  \ 3 \ не нужно.
 f g b c       + + +       ( INVERT ) TC,  \ 4 \ Имена констант соответствуют
 a f g c d     + + + +     ( INVERT ) TC,  \ 5 \ именам сегментов индикатора
 a f g c d e   + + + + +   ( INVERT ) TC,  \ 6
 a b c         + +         ( INVERT ) TC,  \ 7
 a b c d e f g + + + + + + ( INVERT ) TC,  \ 8
 a b c d f g   + + + + +   ( INVERT ) TC,  \ 9

 a b c d e f g + + + + + + == SEGMENTS_MASK
 SEGMENTS_MASK INVERT      == ~SEGMENTS_MASK
 SEGMENTS_MASK dp +        == SEGMENTS_MASK_WITH_DOT
[P]

#DIGITS CVECTOR DIGITS       \ 4 цифры для вывода
CVARIABLE DIGIT         \ текущая цифра
CVARIABLE Get_Time      \ надо ли считывать время из часов?

: PARSE_TIME    ( -- )  \ разбор времени и запись цифр в массив DIGITS
    DS1307_GET_TIME ( s m h )               \ получаем время
    NIBBLE-SPLIT 0 DIGITS C! 1 DIGITS C!    \ делим часы на 2 цифры
    NIBBLE-SPLIT 2 DIGITS C! 3 DIGITS C!    \ минуты
    DROP
;

: GET_TIME                                  \ 4 раза в секунду
    Get_Time C@ IF
        PARSE_TIME                          \ получим время
    THEN
    ['] GET_TIME 250 RTOS_SET_TIMER_TASK
;

: GET_TIME_ON       \ периодически получаем время
    01 Get_Time C!
;

: GET_TIME_OFF      \ выключить получение времени
    00 Get_Time C!
;

: BCD@  ( addr -- value )   \ взять значение в BCD-формате (2 байта) и преобразовать в число
    @ BYTE-SPLIT SWAP
    0x0A * +
;

: >BCD  ( value - bcd )     \ преобразовать число в BCD-формат
    0x0A /MOD ( hi lo )
    NIBBLE-JOIN
;

: BCD+1 ( addr max -- bcd ) \ число в BCD-формате увеличить на 1, цикл до max
    SWAP BCD@ 1+ ( max num+1 )
    SWAP MOD
    >BCD
;

: BCD-1 ( addr max -- bcd ) \ число в BCD-формате уменьшить на 1, цикл до max
    SWAP BCD@ 1- OVER + ( max num-1+max )
    SWAP MOD
    >BCD
;

[VECT] [MODE_TASKS] \ задачи кнопок для текущего режима

CVARIABLE MODE
0x3 == #MODES     \ количество режимов

\ режим:
\ 0 - нормальный
\ 1 - установка часов
\ 2 - установка минут

CVARIABLE TIMER2         \ для мигания точкой и цифрами
#DIGITS CVECTOR RAW_SEGMENT  \ подготовленные значения для записи в порт сегментов для каждой цифры
#DIGITS CVECTOR RAW_DIGIT    \ подготовленные значения для управления разрядами

: ?BLINK      ( flag mode -- flag' )
  MODE C@ = AND TIMER2 C@ 01 AND AND
;

: FORMAT_DIGIT ( n -- )             \ текущая цифра
    DUP 02 AND 0= 1 ?BLINK IF        \ выключить часы
      0
    ELSE DUP 02 AND 2 = 2 ?BLINK IF  \ выключить минуты
      0
    ELSE
      DUP EXP2                       \ дешифруем номер выводимой цифры
    THEN THEN
    SWAP RAW_DIGIT C!
;

: FORMAT_SEGMENT ( n -- )
    DUP DIGITS C@                   \ выводимая цифра
    SEGMENTS + C@P                  \ значение для вывода на индикатор
    TIMER2 C@ 01 AND IF               \ мигаем точкой
        dp OR
    THEN
    SWAP RAW_SEGMENT C!
;

: RAW_FORMAT                        \ сформировать данные для записи в порты
    #DIGITS BEGIN                   \ по всем разрядам
        1-
        DUP FORMAT_SEGMENT          \ данные для сегментов
        DUP FORMAT_DIGIT            \ данные для разрядов
    [UNTIL<>0]
    DROP
;

: TIMER2_TASK            \ тикает 2 раза в секунду
    ['] TIMER2_TASK 500 RTOS_SET_TIMER_TASK   \ 2 раза в секунду
    TIMER2 C@ 1+ TIMER2 C!          \ увеличиваем счетчик
    RAW_FORMAT           \ подготовим данные для записи в порты
;

: SHOW_DIGIT            \ динамическая индикация текущей цифры
    DIGIT C@
    {DIGITS} {CLEAR}      \ откл. сегменты
    DUP RAW_SEGMENT C@  SEGMENTS_PORT PORT.WRITE        \ выводим значения сегментов
    DUP RAW_DIGIT C@    DIGITS_PORT   PORT.WRITE        \ включить нужный индикатор
    1+ 3 AND            \ увеличиваем на 1 текущую цифру и сворачиваем
    DIGIT C!
;

: SET_MODE  ( mode -- )
    DUP MODE C!
    DUP BUTTONS_MAX * CELLS [MODE_TASKS] + BUTTONS_TASKS ! \ установить задачи для кнопок соответственно режиму
    0= Get_Time C!      \ обычный режим - обновляем время
;

: NORMAL                \ вернуться в нормальный режим
    0 SET_MODE
;

: RETURN_TO_NORMAL      \ вернуться в нормальный режим через 10 секунд
    ['] NORMAL 10000 RTOS_SET_TIMER_TASK
;

: NEXT_MODE ( -- )
    MODE C@ 1+ #MODES MOD SET_MODE \ следующий режим
    RETURN_TO_NORMAL
;

: (SET) ( reg value -- ) \ установить регистр часов, отформатировать время,
                          \ вернуться к нормальному режиму через 10 секунд
     SWAP DS1307_SET
     PARSE_TIME
     RAW_FORMAT
     RETURN_TO_NORMAL
;

: NEXT_HOUR ( -- )  \ увеличить час на 1
     DS1307_Hours
     0 DIGITS 24 BCD+1
     (SET)
;

: PREV_HOUR ( -- ) \ уменьшить час на 1
     DS1307_Hours
     0 DIGITS 24 BCD-1
     (SET)
;

: NEXT_MINUTE ( -- ) \ увеличить минуты на 1
     DS1307_Minutes
     2 DIGITS 60 BCD+1
     (SET)
;

: PREV_MINUTE ( -- ) \ уменьшить минуты на 1
     DS1307_Minutes
     2 DIGITS 60 BCD-1
     (SET)
;

TCREATE MODE_BTN_TASKS
\ задачи для кнопок в режиме 0
' IDLE T, ' IDLE T, ' IDLE T, ' IDLE T, ' IDLE T, ' NEXT_MODE T,   ' IDLE T,       ' IDLE T,
\ задачи для кнопок в режиме 1
' IDLE T, ' IDLE T, ' IDLE T, ' IDLE T, ' IDLE T, ' NEXT_MODE T,   ' PREV_HOUR T,  ' NEXT_HOUR T,
\ задачи для кнопок в режиме 2
' IDLE T, ' IDLE T, ' IDLE T, ' IDLE T, ' IDLE T, ' NEXT_MODE T,   ' PREV_MINUTE T, ' NEXT_MINUTE T,

: @MODE_BTN_TASKS   MODE_BTN_TASKS ;
' @MODE_BTN_TASKS [->] [MODE_TASKS]

: ALL_DIGITS ( n -- )   \ установить все разряды в n
    0 DIGITS #DIGITS ROT FILL
;

: 9_TO_0  ( -- )      \ пройти от 9 до 0
    10 BEGIN
        1-
        DUP ALL_DIGITS RAW_FORMAT
        150 MS
    [UNTIL<>0]
    DROP
;

: INIT
    [ SEGMENTS_MASK_WITH_DOT SEGMENTS_PORT ] {OUTPUT}  \ порт для подключения сегментов - выход
    {DIGITS} {OUTPUT}                                  \ порт для подключения разрядов - выход
    [ BITS{ WDP0 WDP1 WDP2 }BITS ] WDT_PRESCALER    \ сторожевой таймер на 2 секунды

    RTOS_INIT
    NORMAL      \ обычный режим часов
    RTOS_RUN    \ запустить диспетчер

    9_TO_0      \ задержка для надежного определения наличия часов

    DS1307_INIT INVERT DUP Get_Time C!                  \ проверим наличие DS1307

    IF  \ есть DS1307?
        BUTTONS {GROUP.MASK} BUTTONS_ENABLED C!         \ все кнопки вкл
        [ BUTTONS BTN_SET -GROUP {GROUP.MASK} ] LITERAL
            BUTTONS_REPEATABLE C!
            \ кнопка BTN_SET не повторяет нажатия
        MODE_BTN_TASKS BUTTONS_TASKS !                  \ задачи для кнопок
        BUTTONS_INIT                                    \ инициализация порта

        ['] BUTTONS_TASK RTOS_SET_TASK                  \ обработчик кнопок
        ['] GET_TIME     RTOS_SET_TASK                  \ чтение времени
        ['] TIMER2_TASK  RTOS_SET_TASK                  \ мигание цифрами
    ELSE \ нет - показываем прочерки
        RAW_FORMAT
        0 RAW_SEGMENT #DIGITS g FILL    \ сформируем 4 прочерка
    THEN
;

: MAIN
    INIT
    BEGIN
        RTOS_TASK_MANAGER   \ выполняем задачи из очереди
        WDR                 \ сброс сторожевого таймера
    AGAIN
;

INT: TIMER                  \ по таймеру 1000 раз в секунду
    SHOW_DIGIT              \ выводим текущую цифру
    RTOS_TIMER_SERVICE      \ запускаем службу таймеров ОС
;INT

' TIMER RTOS_TIMER_INTERRUPT INT! \ задать обработчик прерывания по таймеру
