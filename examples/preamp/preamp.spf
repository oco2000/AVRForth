\ ATmega8
\ +DEBUG2

[F] DECIMAL [P]

SLOWLITS

8000000 == F_CPU

0x0 == MODE_SUSPEND
0x1 == MODE_ON
0x2 == MODE_MENU

REQUIRE {SET}           lib/ports.spf
REQUIRE BUS.WRITE       lib/bus.spf

TREQUIRE NOOP

PB0 WIRE BTN_DOWN
PB1 WIRE BTN_UP
PB2 WIRE BTN_SELECT
PB3 WIRE BTN_EXIT
PB4 WIRE BTN_POWER
PB5 WIRE BTN_INPUT1
PB6 WIRE BTN_INPUT2
PB7 WIRE BTN_INPUT3

PD0 WIRE STANDBY
PD6 WIRE POWER
GROUP{ STANDBY POWER }GROUP OUTPUTS

BUS{ BTN_INPUT3 BTN_INPUT2 BTN_INPUT1 BTN_POWER BTN_EXIT BTN_SELECT BTN_UP BTN_DOWN }BUS BUTTONS
0x3 == REPEATABLE_MASK
0xFF == ENABLED_MASK

0x4 == ChangesPerClick \ should be a power of two
BUS{ PD5 PD4 }BUS EncBus

PC0 WIRE Input1LED
PC1 WIRE Input2LED
PD7 WIRE Input3LED
BUS{ Input3LED Input2LED Input1LED }BUS InputLEDBus

0x1C == RC5Address
0x11 == RC5PowerBtn

[IFDEBUG2]
  REQUIRE _USART_INIT   lib/usart/atmega8-usart-config.spf
  REQUIRE USART         lib/usart/usart.spf

  : USART_TYPE ( a u -- )
    00 ?DO  DUP C@ USART_SEND 1+ LOOP
    DROP
  ;

  : DEBUG. ( n -- )
    BASE @ HEX
    SWAP (.) USART_TYPE BL USART_SEND
    BASE !
  ;

  : CR  0xD USART_SEND ;
[THEN]

:: LCD_I2C ;;
0x4E == LCD_Addr
REQUIRE LCD_CLRSCR       lib/lcd/lcd.spf
REQUIRE LCD_CHAR         lib/lcd/definechar.spf
\ REQUIRE BIG_SETUP        lib/lcd/big.spf
REQUIRE PROGRESSBAR      lib/lcd/progress.spf
REQUIRE RTOS_INIT_TIMER  lib/eertos/atmega8-eertos-config.spf
REQUIRE RTOS_RUN         lib/eertos/eertos.spf
REQUIRE BUTTONS_PERIOD   lib/buttons/buttons-std-config.spf
REQUIRE DEBOUNCE         lib/buttons/buttons.spf
REQUIRE MENU             lib/lcd_menu/menu.spf
REQUIRE INT-EDITOR       lib/lcd_menu/int_editor.spf
REQUIRE PROGRESS-DISPLAY lib/lcd_menu/progress_editor.spf
REQUIRE SUPERSTRING      lib/superstring.spf
REQUIRE DS1307           lib/ds1307.spf
REQUIRE EncInit          lib/encoder.spf
REQUIRE RC5_Init_Timer   lib/rc5/atmega8-rc5-config.spf
REQUIRE RC5Init          lib/rc5/rc5.spf
REQUIRE Snd.Init         tda7313.spf

CVARIABLE DS1307_Present?
C" DS1307 not found!" == "DS1307_error"

[F] DECIMAL [P]

: BCD> ( bcd -- value )
  NIBBLE-SPLIT 0x0A * +
;

: >BCD  ( value -- bcd )
  0x0A /MOD ( hi lo )
  NIBBLE-JOIN
;

: (H) ( n -- addr u )  0 <# # # # # #> ;
: (2D) ( n -- a u ) 0 <# # # #> ;
: 2D. ( n -- )  (2D) TYPE ;
: HEX.  ( n -- ) (H) TYPE SPACE ;

: INPUT-LED ( -- )
  Snd.getInput 1- EXP2 InputLEDBus INVERT BUS.WRITE
;

: INPUT-LEDS-OFF
  InputLEDBus BUS.SET
;

: SET-INPUT   ( value -- )
  Snd.setInput Snd.writeInput
  INPUT-LED
;

[VECT] Info

:: INPUT ( n -- )
  PCREATE T,
  PDOES>
    @P SET-INPUT
    Info
  ;
;;

1 INPUT Input1!
2 INPUT Input2!
3 INPUT Input3!

S" ./menu_config.spf" INCLUDED

\\ LCD Custom chars
4 == C_SOUND_ON
5 == C_SOUND_OFF
6 == C_INPUT

@BINARY

  00001
  00011
  11101
  10101
  11101
  00011
  00001
  00000

LCD_CHAR SET_C_SOUND_ON

  10001
  01011
  11111
  10101
  11111
  01011
  10001
  00000

LCD_CHAR SET_C_SOUND_OFF

  00000
  00100
  00010
  11111
  00010
  00100
  00000
  00000

LCD_CHAR SET_C_INPUT

BASE!

: _Info
  2 0 AT
  FORMAT-LONG-DATE TYPE SPACE
  GET-DOW (.DOW) TYPE

  11 1 AT
  FORMAT-SHORT-TIME TYPE SPACE

  0 1 AT
  C_INPUT EMIT Snd.getInput .
  Snd.muted? IF C_SOUND_OFF ELSE C_SOUND_ON THEN EMIT
  Snd.getVolume .
;

' _Info [->] Info

: ModeOnTask
  Info
  ['] ModeOnTask 1000 RTOS_SET_TIMER_TASK
;

[VECT] ENTER-VOLUME
[VECT] PowerOn
[VECT] PowerOff

TCREATE ModeOffBtnTasks
' NOOP T,   ' NOOP T,   ' NOOP T,   ' NOOP T,   ' PowerOn T,   ' NOOP T,   ' NOOP T,   ' NOOP T,

TCREATE ModeMenuBtnTasks
' DOWN-MENU T,   ' UP-MENU T,   ' ENTER-MENU T,   ' EXIT-MENU T,   ' PowerOff T,  ' NOOP T,   ' NOOP T,   ' NOOP T,

: EnterModeMenu
  ['] ModeOnTask RTOS_REMOVE_TASK
  M_Main SET-MENU
  ENTER-MENU
  ModeMenuBtnTasks BUTTONS_TASKS !
;

TCREATE ModeOnBtnTasks
' ENTER-VOLUME T,   ' ENTER-VOLUME T,   ' EnterModeMenu T,   ' NOOP T,   ' PowerOff T,   ' Input1! T,   ' Input2! T,   ' Input3! T,

: EnterModeOn
  ON-EDITOR-CANCEL OFF
  EDITOR-TIMERED OFF
  ModeOnBtnTasks BUTTONS_TASKS !
  PAGE ModeOnTask
;
' EnterModeOn M_Main SET-CANCEL

: EnterModeOff
  ['] ModeOnTask RTOS_REMOVE_TASK
  ModeOffBtnTasks BUTTONS_TASKS !
  PAGE
;

CVARIABLE PowerOn?

: (PowerOn)
  1 PowerOn? C!
  LCD_Backlight_ON
  LCD_DISP_ON LCD_COMMAND
  Snd.Init
  INPUT-LED
  POWER {SET}
  STANDBY {SET}
  EnterModeOn
;
' (PowerOn) [->] PowerOn

: (PowerOff)
  0 PowerOn? C!
  Snd.mute
  STANDBY {CLEAR}
  POWER {CLEAR}
  INPUT-LEDS-OFF
  ON-EDITOR-CANCEL OFF
  EDITOR-TIMERED OFF
  LCD_Backlight_OFF
  LCD_DISP_OFF LCD_COMMAND
  EnterModeOff
;
' (PowerOff) [->] PowerOff

: (ENTER-VOLUME) ( -- )
  ['] ModeOnTask RTOS_REMOVE_TASK
  ['] EnterModeOn ON-EDITOR-CANCEL !
  EDITOR-TIMERED ON
  VOLUME-EDITOR DROP
;
' (ENTER-VOLUME) [->] ENTER-VOLUME

: PowerToggle ( -- )
  PowerOn? C@ IF PowerOff ELSE PowerOn THEN
;

PCREATE RC5Commands
RC5PowerBtn TC,   ' PowerToggle T,
0 TC, TALIGN

: HandleRC5Command ( command -- )
  >R RC5Commands BEGIN
    DUP C@P DUP R@ = IF ( addr com )
      SWAP CHAR+ DUP @EXECUTE ( com addr+1 )
    ELSE SWAP CHAR+ THEN
    CELL+ SWAP ( addr+3 com )
  0= UNTIL
  RDROP DROP
;

: RC5_Command_Received ( -- )
  RC5_Command 2@ RC5_Analyze IF
    \ address command toggle
    DROP SWAP RC5Address = IF HandleRC5Command ELSE DROP THEN
  THEN
;

: LCDInit
  LCD_DISP_OFF  LCD_INIT
  C_SOUND_OFF SET_C_SOUND_OFF
  C_SOUND_ON SET_C_SOUND_ON
  C_INPUT SET_C_INPUT
;

: INIT
  DECIMAL
  [IFDEBUG2]
    9600 BAUD USART_INIT
  [THEN]

  OUTPUTS {OUTPUT}
  InputLEDBus BUS.OUTPUT
  INPUT-LEDS-OFF
  LCDInit
  MENU-INIT
  PROGRESS-INIT
  EncInit
  DS1307_INIT 0= DS1307_Present? C!
  RC5_Init
  PowerOff

  ENABLED_MASK BUTTONS_ENABLED C!
  REPEATABLE_MASK BUTTONS_REPEATABLE C!
  BUTTONS_INIT
  RTOS_INIT
  ['] BUTTONS_TASK RTOS_SET_TASK
  ['] RC5_Command_Received IS RC5_Task
;

: ProcessEncoder ( increment -- )
  BUTTONS_TASKS @
  SWAP 0< IF CELL+ THEN
  @P RTOS_SET_TASK
;

: CheckEncoder
  EncIncrement ?DUP IF
    ProcessEncoder
  THEN
;

: MAIN
  INIT

  DS1307_Present? C@ 0= IF
    PAGE "DS1307_error" COUNTP TYPEP
  THEN

  RTOS_RUN

  BEGIN
    RTOS_TASK_MANAGER
  AGAIN
;

INT: TIMER
  CheckEncoder
  RTOS_TIMER_SERVICE
;INT

TIMER RTOS_TIMER_INTERRUPT INT!
