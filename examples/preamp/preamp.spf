\ ATmega8
\ +DEBUG2

[F] DECIMAL [P]

SLOWLITS

8000000 == F_CPU

REQUIRE {SET}           lib/ports.spf
REQUIRE BUS.WRITE       lib/bus.spf

TREQUIRE NOOP

\ Input buttons configuration
PB0 WIRE BTN_DOWN
PB1 WIRE BTN_UP
PB2 WIRE BTN_SELECT
PB3 WIRE BTN_EXIT
PB4 WIRE BTN_POWER
PB5 WIRE BTN_INPUT1
PB6 WIRE BTN_INPUT2
PB7 WIRE BTN_INPUT3

\ Standby LED
PD0 WIRE STANDBY
\ Power relay switch
PD6 WIRE POWER
GROUP{ STANDBY POWER }GROUP OUTPUTS

\ Input buttons LEDs
PC0 WIRE Input1LED
PC1 WIRE Input2LED
PD7 WIRE Input3LED
BUS{ Input3LED Input2LED Input1LED }BUS InputLEDBus

\ Buttons library configuration
BUS{ BTN_INPUT3 BTN_INPUT2 BTN_INPUT1 BTN_POWER BTN_EXIT BTN_SELECT BTN_UP BTN_DOWN }BUS BUTTONS
0x3 == REPEATABLE_MASK
0xFF == ENABLED_MASK

\ Encoder configuration
0x4 == ChangesPerClick \ should be a power of two
BUS{ PD5 PD4 }BUS EncBus

\ Include libraries
:: LCD_I2C ;;
0x4E == LCD_Addr
REQUIRE LCD_CLRSCR       lib/lcd/lcd.spf
REQUIRE LCD_CHAR         lib/lcd/definechar.spf
REQUIRE PROGRESSBAR      lib/lcd/progress.spf

:: !RTOS_CUSTOM_INT ;; \ we have a custom RTOS interrupt, no need to include standard one
REQUIRE RTOS_INIT_TIMER  lib/eertos/atmega8-eertos-config.spf
REQUIRE RTOS_RUN         lib/eertos/eertos.spf

REQUIRE BUTTONS_PERIOD   lib/buttons/buttons-std-config.spf
REQUIRE DEBOUNCE         lib/buttons/buttons.spf

REQUIRE MENU             lib/lcd_menu/menu.spf
REQUIRE INT-EDITOR       lib/lcd_menu/int_editor.spf
REQUIRE PROGRESS-DISPLAY lib/lcd_menu/progress_editor.spf

REQUIRE SUPERSTRING      lib/superstring.spf

REQUIRE DS1307           lib/ds1307.spf

REQUIRE EncInit          lib/encoder.spf

REQUIRE RC5_Init_Timer   lib/rc5/atmega8-rc5-config.spf
REQUIRE RC5Init          lib/rc5/rc5.spf

S" tda7313.spf" INCLUDED

S" preamp_tools.spf" INCLUDED

CVARIABLE DS1307_Present?

[F] DECIMAL [P]

\ Handle input LEDs

: INPUT-LED ( -- ) \ Turn on current input LED
  Snd.getInput 1- EXP2 InputLEDBus INVERT BUS.WRITE
;

: INPUT-LEDS-OFF
  InputLEDBus BUS.SET
;

: SET-INPUT   ( input -- ) \ select input
  Snd.setInput Snd.writeInput
  INPUT-LED
;

[VECT] Info \ Show the info screen

\\ Inout buttons tasks
:: INPUT ( n -- )
  PCREATE T,
  PDOES>
    @P SET-INPUT
    Info
  ;
;;

1 INPUT Input1!
2 INPUT Input2!
3 INPUT Input3!

S" ./menu_config.spf" INCLUDED
S" ./preamp_lcd_chars.spf" INCLUDED

: (Info) \ Show the info screen
  2 0 AT
  FORMAT-LONG-DATE TYPE SPACE
  GET-DOW (.DOW) TYPE

  8 1 AT
  TRUE FORMAT-TIME TYPE SPACE

  0 1 AT
  C_INPUT EMIT Snd.getInput .
  Snd.muted? IF C_SOUND_OFF ELSE C_SOUND_ON THEN EMIT
  Snd.getVolume .
;

' (Info) [->] Info

\ Executes in On Mode

: ModeOnTask
  Info
  ['] ModeOnTask 1000 RTOS_SET_TIMER_TASK
;

\ Buttons tasks configuration in different modes
\ Modes configuration

[VECT] ENTER-VOLUME
[VECT] PowerOn
[VECT] PowerOff

\\ Tasks for off mode
TCREATE ModeOffBtnTasks
' NOOP T,   ' NOOP T,   ' NOOP T,   ' NOOP T,   ' PowerOn T,   ' NOOP T,   ' NOOP T,   ' NOOP T,

\\ Tasks for menu mode
TCREATE ModeMenuBtnTasks
' DOWN-MENU T,   ' UP-MENU T,   ' ENTER-MENU T,   ' EXIT-MENU T,   ' PowerOff T,  ' NOOP T,   ' NOOP T,   ' NOOP T,

: EnterModeMenu \ Enter main menu and set corresponding tasks
  ['] ModeOnTask RTOS_REMOVE_TASK \ stop showing the info
  M_Main SET-MENU
  ENTER-MENU
  ModeMenuBtnTasks BUTTONS_TASKS !
;

\\ Tasks for on mode
TCREATE ModeOnBtnTasks
' ENTER-VOLUME T,   ' ENTER-VOLUME T,   ' EnterModeMenu T,   ' NOOP T,   ' PowerOff T,   ' Input1! T,   ' Input2! T,   ' Input3! T,

: EnterModeOn \ Exit menu and enter On Mode
  ON-EDITOR-CANCEL OFF
  EDITOR-TIMERED OFF
  ModeOnBtnTasks BUTTONS_TASKS !
  PAGE
  ModeOnTask \ Continue showing the info
;
' EnterModeOn M_Main SET-CANCEL

: EnterModeOff \ Enter Off Mode
  ['] ModeOnTask RTOS_REMOVE_TASK
  ModeOffBtnTasks BUTTONS_TASKS !
  PAGE
;

\ Auto enter Volume menu on Volume buttons press
: (ENTER-VOLUME) ( -- )
  ['] ModeOnTask RTOS_REMOVE_TASK
  ['] EnterModeOn ON-EDITOR-CANCEL !
  EDITOR-TIMERED ON
  VOLUME-EDITOR DROP
;
' (ENTER-VOLUME) [->] ENTER-VOLUME

\ Power handling
CVARIABLE PowerOn?

: (PowerOn) \ Turn on the power
  1 PowerOn? C!
  LCD_Backlight_ON
  LCD_DISP_ON LCD_COMMAND
  Snd.Init
  INPUT-LED
  POWER {SET}
  STANDBY {SET}
  EnterModeOn
;
' (PowerOn) [->] PowerOn

: (PowerOff)
  0 PowerOn? C!
  Snd.mute
  STANDBY {CLEAR}
  POWER {CLEAR}
  INPUT-LEDS-OFF
  ON-EDITOR-CANCEL OFF
  EDITOR-TIMERED OFF
  LCD_Backlight_OFF
  LCD_DISP_OFF LCD_COMMAND
  EnterModeOff
;
' (PowerOff) [->] PowerOff

: IsOnMode ( - t/f )
  BUTTONS_TASKS @ ModeOnBtnTasks =
;

: MuteToggle
  IsOnMode IF Snd.toggleMute Snd.writeMuted Info THEN ;

S" ./preamp_rc5.spf" INCLUDED

: LCDInit \ Init the LCD and load custom chars
  LCD_DISP_OFF  LCD_INIT
  C_SOUND_OFF SET_C_SOUND_OFF
  C_SOUND_ON SET_C_SOUND_ON
  C_INPUT SET_C_INPUT
;

: INIT
  DECIMAL
  [IFDEBUG2]
    9600 BAUD USART_INIT
  [THEN]

  OUTPUTS {OUTPUT}
  InputLEDBus BUS.OUTPUT
  INPUT-LEDS-OFF
  LCDInit
  MENU-INIT
  PROGRESS-INIT
  EncInit
  DS1307_INIT 0= DS1307_Present? C!
  RC5_Init
  PowerOff

  ENABLED_MASK BUTTONS_ENABLED C!
  REPEATABLE_MASK BUTTONS_REPEATABLE C!
  BUTTONS_INIT
  RTOS_INIT
  ['] BUTTONS_TASK RTOS_SET_TASK
  ['] RC5CommandReceived IS RC5_Task
;

\ Encoder emulates 0 and 1 buttons
: ProcessEncoder ( increment -- )
  Editing C@ IFNOT NEGATE THEN \ reverse direction if not in editing mode
  0< NEGATE set_Nth_task
;

: CheckEncoder ( -- )
  EncIncrement ?DUP IF \ is turning
    ProcessEncoder
  THEN
;

: MAIN
  INIT

  RTOS_RUN

  BEGIN
    RTOS_TASK_MANAGER
  AGAIN
;

INT: TIMER
  CheckEncoder
  RTOS_TIMER_SERVICE
;INT

TIMER RTOS_TIMER_INTERRUPT INT!
