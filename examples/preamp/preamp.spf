\ ATmega8
\ +DEBUG2

[F] DECIMAL [P]

SLOWLITS

8000000 == F_CPU

REQUIRE {SET}           lib/ports.spf
REQUIRE BUS.WRITE       lib/bus.spf

TREQUIRE NOOP

\ Input buttons configuration
PB0 WIRE BTN_DOWN
PB1 WIRE BTN_UP
PB2 WIRE BTN_SELECT
PB3 WIRE BTN_EXIT
PB4 WIRE BTN_POWER
PB5 WIRE BTN_INPUT1
PB6 WIRE BTN_INPUT2
PB7 WIRE BTN_INPUT3

\ Standby LED
PD0 WIRE STANDBY
\ Power relay switch
PD6 WIRE POWER
GROUP{ STANDBY POWER }GROUP OUTPUTS

\ Input buttons LEDs
PC0 WIRE Input1LED
PC1 WIRE Input2LED
PD7 WIRE Input3LED
BUS{ Input3LED Input2LED Input1LED }BUS InputLEDBus

\ Buttons library configuration
BUS{ BTN_INPUT3 BTN_INPUT2 BTN_INPUT1 BTN_POWER BTN_EXIT BTN_SELECT BTN_UP BTN_DOWN }BUS BUTTONS
0x3 == REPEATABLE_MASK
0xFF == ENABLED_MASK

\ Encoder configuration
0x4 == ChangesPerClick \ should be a power of two
BUS{ PD5 PD4 }BUS EncBus

\ RC5 configuration
\ Proteus
\ ~0x1C == RC5Address
\ ~0x11 == RC5PowerBtn

\ Real HW
\ UET-606 AUX code 0552
0x14 == RC5Address

0x0C == RC5PowerBtn
0x0D == RC5MuteBtn
0x10 == RC5VolUpBtn
0x11 == RC5VolDownBtn
0x20 == RC5UpBtn
0x21 == RC5DownBtn
0x1E == RC5RightBtn
0x1F == RC5LeftBtn
0x29 == RC5OKBtn
0x3A == RC5ClearBtn
0x01 == RC51Btn
0x02 == RC52Btn
0x03 == RC53Btn

\ Debugging tools
[IFDEBUG2]
  REQUIRE _USART_INIT   lib/usart/atmega8-usart-config.spf
  REQUIRE USART         lib/usart/usart.spf

  : USART_TYPE ( a u -- )
    00 ?DO  DUP C@ USART_SEND 1+ LOOP
    DROP
  ;

  : DEBUG. ( n -- )
    BASE @ HEX
    SWAP (.) USART_TYPE BL USART_SEND
    BASE !
  ;

  : CR  0xD USART_SEND ;
[THEN]

\ Include libraries
:: LCD_I2C ;;
0x4E == LCD_Addr
REQUIRE LCD_CLRSCR       lib/lcd/lcd.spf
REQUIRE LCD_CHAR         lib/lcd/definechar.spf
\ REQUIRE BIG_SETUP        lib/lcd/big.spf
REQUIRE PROGRESSBAR      lib/lcd/progress.spf
REQUIRE RTOS_INIT_TIMER  lib/eertos/atmega8-eertos-config.spf
REQUIRE RTOS_RUN         lib/eertos/eertos.spf
REQUIRE BUTTONS_PERIOD   lib/buttons/buttons-std-config.spf
REQUIRE DEBOUNCE         lib/buttons/buttons.spf
REQUIRE MENU             lib/lcd_menu/menu.spf
REQUIRE INT-EDITOR       lib/lcd_menu/int_editor.spf
REQUIRE PROGRESS-DISPLAY lib/lcd_menu/progress_editor.spf
REQUIRE SUPERSTRING      lib/superstring.spf
REQUIRE DS1307           lib/ds1307.spf
REQUIRE EncInit          lib/encoder.spf
REQUIRE RC5_Init_Timer   lib/rc5/atmega8-rc5-config.spf
REQUIRE RC5Init          lib/rc5/rc5.spf
REQUIRE Snd.Init         tda7313.spf

CVARIABLE DS1307_Present?
C" DS1307 not found!" == "DS1307_error"

[F] DECIMAL [P]

\ Tools

: BCD> ( bcd -- value )
  NIBBLE-SPLIT 0x0A * +
;

: >BCD  ( value -- bcd )
  0x0A /MOD ( hi lo )
  NIBBLE-JOIN
;

: (H) ( n -- addr u )  0 <# # # # # #> ;
: (2D) ( n -- a u ) 0 <# # # #> ;
: 2D. ( n -- )  (2D) TYPE ;
: HEX.  ( n -- ) (H) TYPE SPACE ;

\ Handle input LEDs

: INPUT-LED ( -- ) \ Turn on current input LED
  Snd.getInput 1- EXP2 InputLEDBus INVERT BUS.WRITE
;

: INPUT-LEDS-OFF
  InputLEDBus BUS.SET
;

: SET-INPUT   ( input -- ) \ select input
  Snd.setInput Snd.writeInput
  INPUT-LED
;

[VECT] Info \ Show the info screen

:: INPUT ( n -- )
  PCREATE T,
  PDOES>
    @P SET-INPUT
    Info
  ;
;;

1 INPUT Input1!
2 INPUT Input2!
3 INPUT Input3!

S" ./menu_config.spf" INCLUDED

\\ LCD Custom chars
4 == C_SOUND_ON
5 == C_SOUND_OFF
6 == C_INPUT

@BINARY

  00001
  00011
  11101
  10101
  11101
  00011
  00001
  00000

LCD_CHAR SET_C_SOUND_ON

  10001
  01011
  11111
  10101
  11111
  01011
  10001
  00000

LCD_CHAR SET_C_SOUND_OFF

  00000
  00100
  00010
  11111
  00010
  00100
  00000
  00000

LCD_CHAR SET_C_INPUT

BASE!

: (Info) \ Show the info screen
  2 0 AT
  FORMAT-LONG-DATE TYPE SPACE
  GET-DOW (.DOW) TYPE

  8 1 AT
  TRUE FORMAT-TIME TYPE SPACE

  0 1 AT
  C_INPUT EMIT Snd.getInput .
  Snd.muted? IF C_SOUND_OFF ELSE C_SOUND_ON THEN EMIT
  Snd.getVolume .
;

' (Info) [->] Info

\ Executes in On Mode

: ModeOnTask
  Info
  ['] ModeOnTask 1000 RTOS_SET_TIMER_TASK
;

\ Buttons tasks configuration in different modes
\ Modes configuration

[VECT] ENTER-VOLUME
[VECT] PowerOn
[VECT] PowerOff

TCREATE ModeOffBtnTasks
' NOOP T,   ' NOOP T,   ' NOOP T,   ' NOOP T,   ' PowerOn T,   ' NOOP T,   ' NOOP T,   ' NOOP T,

TCREATE ModeMenuBtnTasks
' DOWN-MENU T,   ' UP-MENU T,   ' ENTER-MENU T,   ' EXIT-MENU T,   ' PowerOff T,  ' NOOP T,   ' NOOP T,   ' NOOP T,

: EnterModeMenu \ Enter main menu and set corresponding tasks
  ['] ModeOnTask RTOS_REMOVE_TASK \ stop showing the info
  M_Main SET-MENU
  ENTER-MENU
  ModeMenuBtnTasks BUTTONS_TASKS !
;

TCREATE ModeOnBtnTasks
' ENTER-VOLUME T,   ' ENTER-VOLUME T,   ' EnterModeMenu T,   ' NOOP T,   ' PowerOff T,   ' Input1! T,   ' Input2! T,   ' Input3! T,

: EnterModeOn \ Exit menu and enter On Mode
  ON-EDITOR-CANCEL OFF
  EDITOR-TIMERED OFF
  ModeOnBtnTasks BUTTONS_TASKS !
  PAGE
  ModeOnTask \ Continue showing the info
;
' EnterModeOn M_Main SET-CANCEL

: EnterModeOff \ Enter Off Mode
  ['] ModeOnTask RTOS_REMOVE_TASK
  ModeOffBtnTasks BUTTONS_TASKS !
  PAGE
;

\ Auto enter Volume menu on Volume buttons press
: (ENTER-VOLUME) ( -- )
  ['] ModeOnTask RTOS_REMOVE_TASK
  ['] EnterModeOn ON-EDITOR-CANCEL !
  EDITOR-TIMERED ON
  VOLUME-EDITOR DROP
;
' (ENTER-VOLUME) [->] ENTER-VOLUME

\ Power handling
CVARIABLE PowerOn?

: (PowerOn) \ Turn on the power
  1 PowerOn? C!
  LCD_Backlight_ON
  LCD_DISP_ON LCD_COMMAND
  Snd.Init
  INPUT-LED
  POWER {SET}
  STANDBY {SET}
  EnterModeOn
;
' (PowerOn) [->] PowerOn

: (PowerOff)
  0 PowerOn? C!
  Snd.mute
  STANDBY {CLEAR}
  POWER {CLEAR}
  INPUT-LEDS-OFF
  ON-EDITOR-CANCEL OFF
  EDITOR-TIMERED OFF
  LCD_Backlight_OFF
  LCD_DISP_OFF LCD_COMMAND
  EnterModeOff
;
' (PowerOff) [->] PowerOff

\ RC5 recognition

:: EmulatedButton \ create RC5 words that emulate buttons
  PCREATE T,
  PDOES> @P set_Nth_task ;
;;

0x4 EmulatedButton PowerToggle
0x0 EmulatedButton Down
0x1 EmulatedButton Up
0x2 EmulatedButton Enter
0x3 EmulatedButton Cancel
0x5 EmulatedButton Input1
0x6 EmulatedButton Input2
0x7 EmulatedButton Input3

: IsOnMode ( - t/f )
  BUTTONS_TASKS @ ModeOnBtnTasks =
;

: MuteToggle
  IsOnMode IF Snd.toggleMute Snd.writeMuted Info THEN ;

PCREATE RC5Commands
RC5PowerBtn    TC,   ' PowerToggle T,
RC5VolUpBtn    TC,   ' Up T,
RC5VolDownBtn  TC,   ' Down T,
RC5UpBtn       TC,   ' Up T,
RC5DownBtn     TC,   ' Down T,
RC5RightBtn    TC,   ' Up T,
RC5LeftBtn     TC,   ' Down T,
RC5MuteBtn     TC,   ' MuteToggle T,
RC5OKBtn       TC,   ' Enter T,
RC5ClearBtn    TC,   ' Cancel T,
RC51Btn        TC,   ' Input1 T,
RC52Btn        TC,   ' Input2 T,
RC53Btn        TC,   ' Input3 T,
0 TC, TALIGN

: HandleRC5Command ( command -- ) \ Search the command and execute as a task if found
  >R RC5Commands BEGIN
    DUP C@P DUP R@ = IF ( addr com )
      DROP CHAR+ @P RTOS_SET_TASK
      RDROP EXIT
    THEN
    SWAP CHAR+ CELL+ SWAP ( addr+3 com )
  0= UNTIL
  RDROP DROP
;

: RC5_Command_Received ( -- )
  RC5_Command 2@ RC5_Analyze IF
    \ address command toggle
    \ TODO handle toggle bit to skip repetitions for some buttons
    DROP SWAP RC5Address = IF HandleRC5Command ELSE DROP THEN
  THEN
;

: LCDInit \ Init the LCD and load custom chars
  LCD_DISP_OFF  LCD_INIT
  C_SOUND_OFF SET_C_SOUND_OFF
  C_SOUND_ON SET_C_SOUND_ON
  C_INPUT SET_C_INPUT
;

: INIT
  DECIMAL
  [IFDEBUG2]
    9600 BAUD USART_INIT
  [THEN]

  OUTPUTS {OUTPUT}
  InputLEDBus BUS.OUTPUT
  INPUT-LEDS-OFF
  LCDInit
  MENU-INIT
  PROGRESS-INIT
  EncInit
  DS1307_INIT 0= DS1307_Present? C!
  RC5_Init
  PowerOff

  ENABLED_MASK BUTTONS_ENABLED C!
  REPEATABLE_MASK BUTTONS_REPEATABLE C!
  BUTTONS_INIT
  RTOS_INIT
  ['] BUTTONS_TASK RTOS_SET_TASK
  ['] RC5_Command_Received IS RC5_Task
;

\ Encoder emulates 0 and 1 buttons
: ProcessEncoder ( increment -- )
  Editing C@ IFNOT NEGATE THEN \ reverse direction in editing mode
  0< IF 1 ELSE 0 THEN
  set_Nth_task
;

: CheckEncoder ( -- )
  EncIncrement ?DUP IF \ is turning
    ProcessEncoder
  THEN
;

: MAIN
  INIT

  DS1307_Present? C@ 0= IF
    PAGE "DS1307_error" COUNTP TYPEP
  THEN

  RTOS_RUN

  BEGIN
    RTOS_TASK_MANAGER
  AGAIN
;

INT: TIMER
  CheckEncoder
  RTOS_TIMER_SERVICE
;INT

TIMER RTOS_TIMER_INTERRUPT INT!
