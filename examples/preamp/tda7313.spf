\ TDA7313 audio processor functions

@DECIMAL

REQUIRE I2C_START lib/i2c.spf
TREQUIRE C!E

0x88 == TDA7313 \ I2C Address

CEVARIABLE Snd.CurrentInput \ Current stereo input (1..3)
0x1 Snd.CurrentInput C!E

0x0 BIT == Input.flag.muted
[F] Input.flag.muted INVERT [P] == ~Input.flag.muted
0x1 BIT == Input.flag.loudness
[F] Input.flag.loudness INVERT [P] == ~Input.flag.loudness

\ Input parameters
0x0
0x1  -- Input.volume
0x1  -- Input.balance
0x1  -- Input.savedBalance
0x1  -- Input.bass
0x1  -- Input.treble
0x1  -- Input.gain
0x1  -- Input.flags
== /InputParams

EHERE == Snd.InputsData
[F] 0x3 /InputParams * [P] == /AllInputParams
/AllInputParams EALLOT

: Snd.sendOne ( data -- ) \  write 1 byte data
  [IFDEBUG2] DUP DEBUG. [THEN]

  TDA7313 I2C_START DROP
  I2C_WRITE_DROP
  I2C_STOP
;

: Snd.getInput ( -- input ) \ 1..3
  Snd.CurrentInput C@E
;

: Snd.currentInputData ( -- addr )
  Snd.getInput 1- /InputParams * Snd.InputsData +
;

: Snd.getFlags ( -- b )
  Snd.currentInputData Input.flags C@E
;

: Snd.setFlags ( b -- )
  Snd.currentInputData Input.flags C!E
;

: Snd.setVolume ( volume -- ) \ 0..63
  Snd.currentInputData Input.volume C!E
;

: Snd.getVolume ( -- volume ) \ 0..63
  Snd.currentInputData Input.volume C@E
;

: Snd.writeVolume ( -- ) \ 0..63
  Snd.getVolume
  0x3F SWAP-
  Snd.sendOne
;

: Snd.setBalance ( balance -- ) \ -31..31
  Snd.currentInputData Input.balance C!E
;

: Snd.getBalance ( balance -- ) \ -31..31
  Snd.currentInputData Input.balance C@E C>S
;

: Snd.writeBalance ( -- ) \ -31..31
  Snd.getBalance
  0 SWAP DUP 0< IF
    ABS SWAP
  THEN
  0x80 OR Snd.sendOne \ Left
  0xA0 OR Snd.sendOne \ Right
;

: Snd.muted? ( -- f )
  Snd.getFlags Input.flag.muted AND
;

: Snd.toggleMute ( -- )
  Snd.getFlags
  Snd.muted? IF
    ~Input.flag.muted AND
    Snd.currentInputData Input.savedBalance C@E
    Snd.currentInputData Input.balance C!E
  ELSE
    Input.flag.muted OR
    Snd.currentInputData Input.balance C@E
    Snd.currentInputData Input.savedBalance C!E
  THEN
  Snd.setFlags
;

: Snd.mute ( -- )
  0x9F Snd.sendOne
  0xBF Snd.sendOne
  0xDF Snd.sendOne \ LR
  0xFF Snd.sendOne \ RR
;

: Snd.writeMuted ( -- )
  Snd.muted? IF
    Snd.mute
  ELSE
    Snd.writeBalance
  THEN
;

: Snd.loud? ( -- f )
  Snd.getFlags Input.flag.loudness AND
;

: Snd.toggleLoudness ( -- )
  Snd.getFlags
  Snd.loud? IF
    ~Input.flag.loudness AND
  ELSE
    Input.flag.loudness OR
  THEN
  Snd.setFlags
;

: Snd.setBass ( bass -- ) \ -7..7
  Snd.currentInputData Input.bass C!E
;

: Snd.getBass ( bass -- ) \ -7..7
  Snd.currentInputData Input.bass C@E C>S
;

: Snd.getEqData ( bass/treble -- data )
  DUP ABS 7 SWAP-
  SWAP 0< INVERT IF 0x8 OR THEN
;

: Snd.writeBass ( -- )
  Snd.getBass Snd.getEqData
  0x60 OR Snd.sendOne
;

: Snd.setTreble ( treble -- ) \ -7..7
  Snd.currentInputData Input.treble C!E
;

: Snd.getTreble ( treble -- ) \ -7..7
  Snd.currentInputData Input.treble C@E C>S
;

: Snd.writeTreble ( -- )
  Snd.getTreble Snd.getEqData
  0x70 OR Snd.sendOne
;

: Snd.setGain ( gain -- ) \ 0..3
  Snd.currentInputData Input.gain C!E
;

: Snd.getGain ( gain -- ) \ 0..3
  Snd.currentInputData Input.gain C@E
;

: Snd.writeAudioSwitch ( -- )
  Snd.getGain  3 SWAP- 3 LSHIFT
  Snd.loud? 0= 1 AND   2 LSHIFT  OR
  Snd.getInput 1-   OR
  0x40 OR Snd.sendOne
;

: Snd.setInput ( n -- ) \ 1..3
  Snd.CurrentInput C!E
;

: Snd.writeInput ( -- )
  Snd.writeAudioSwitch
  Snd.writeTreble
  Snd.writeBass
  Snd.writeMuted
  Snd.writeVolume
;

: Snd.setDefault
  Snd.InputsData /AllInputParams 0 DO
    0 OVER C!E
    1+
  LOOP
  0 Snd.setInput
;

: Snd.Init
  Snd.getInput 1 4 WITHIN INVERT IF
    \ EEPROM is not initialized
    Snd.setDefault
  THEN
  Snd.writeInput
;

BASE!
