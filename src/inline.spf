\ defining words and macros

\ registers map:
\ yh:yl - data stack pointer
\ xh:xl - top value of the data stack
\ wh:wl - temp registers, DO loop counter
\ zh:zl - temp registers
\ r20:r21 - upper limit in DO loop
\ r22:r23 - temp registers
\ r16:r17 - temp registers, rarely used
\ r18:r19 - temp registers, rarely used
\ r0    - temp register, used by lpm instruction

\ register aliases
wl CONSTANT cntl    \ r24
wh CONSTANT cnth    \ r25
r20 CONSTANT cbl
r21 CONSTANT cbh
r0 CONSTANT tmpl
r1 CONSTANT tmph
r16 CONSTANT tmp1l
r17 CONSTANT tmp1h
r18 CONSTANT tmp2l
r19 CONSTANT tmp2h
xl CONSTANT tosl    \ r26
xh CONSTANT tosh    \ r27

: (PROLOG)  ( -- )  \ word prolog

;

: (EPILOG)  ( -- )  \ word epilog
    OPTIM? CASE     \ optimize tail recursion
      1 OF \ convert the last call to jmo
          DEBUG3" call>jmp"
          THERE 4 - DUP TC@  2 - SWAP TC! ENDOF \ call -> jmp
      2 OF \ convert the last rcall to rjmo
          DEBUG3" rcall>rjmp"
          THERE  1- DUP TC@ 10 - SWAP TC! ENDOF \ rcall -> rjmp
      3 OF \ don't compile ret after jmp,rjmp,ijmp
          DEBUG3" jmp,rjmp,ijmp>"
          ENDOF \ do nothing
      ret
    ENDCASE
    NEW
;

: (CALL)    ( addr -- ) \ compile a call to addr
    DUP ?FAR IF
        call
        1 TO OPTIM? \ tail recursion optimization
    ELSE
        rcall
        2 TO OPTIM? \ tail recursion optimization
    THEN ;

: (JMP)     ( addr -- ) \ compile a jump to addr
    DUP ?FAR IF jmp  ELSE rjmp  THEN
    3 TO OPTIM?      \ tail recursion optimization
;

: (UJMP)    ( -- ) \ ret
    ret ;

: pushd     ( reg -- ) \ push r+1:r register pair to the data stack
  DUP -[y] st
  1+  -[y] st
;

: popd      ( reg -- ) \ pop r+1:r register pair from the data stack
  [y]+ OVER 1+ ld
  [y]+ SWAP    ld
;

: pushtmp   ( -- ) \ push tmp register pair to the data stack
  tmpl pushd
;

: poptmp    ( -- ) \ pop tmp register pair from the data stack
  tmpl popd
;

: pusht     ( -- ) \ DUP, push TOS
  tosl pushd
  4 TO OPTIM?
;

: popt      ( -- ) \ DROP, pop TOS
  OPTIM? 4 = IF   \ remove DUP DROP
    DEBUG3" dup drop"
    -4 TALLOT NEW
  ELSE
    tosl popd
    5 TO OPTIM?
  THEN
;

\ ------------------------ literals

: SLOWLITS ( -- ) \ use slower literals, but less memory
  ?TEXEC
  S" lit" TREQUIRED
  4 TO LITSIZE
;

2VARIABLE LASTLITS    \ stack of two last literals
\ the first cell is the last literal
0. LASTLITS 2!

2VARIABLE L_MARK     \ addresses of the two latest literals

: LITS_MARK     ( -- )  L_MARK @ THERE L_MARK 2! ; \ push the address of the last literal

: PUSHLIT       ( n -- )  \ push the literal to the literals stack
   LASTLITS 2@ NIP SWAP LASTLITS 2!
   #LITS 1+ 02 MIN TO #LITS
;

: QLIT1?         ( -- F | lit T )
\ if the latest compiled code is the literal, return it and remove the code
\ reset the literals stack
[F]
    #LITS IF
      L_MARK @ ORG         \ remove the code
      LASTLITS @ TRUE      \ get the literal value
    ELSE
      FALSE
    THEN
    NEW
[P]
;

: QLIT2?        ( -- F | lit T )
\ if the latest compiled code is the literal, return it and remove the code
\ pop the literal from the literals stack
[F]
    #LITS
    IF
      L_MARK 2@ ORG L_MARK !      \ remove the code
      LASTLITS 2@ SWAP LASTLITS ! \ pop the value
      #LITS 1- TO #LITS
      TRUE
    ELSE
      FALSE NEW
    THEN
[P]
;

: (LIT)   ( n -- )  \ compile a literal
[F]
    OPTIM? 5 = IF \ optimize DROP literal, don't need to do pop and push, just replace the TOS
      DEBUG3" drop lit; "
      -4 TALLOT \ remove the drop code
      tosl ldiw
    ELSE
      LITS_MARK \ store the literal address
      #LITS >R

      DUP
      (SLOWLIT) @ ?DUP IF \ compile a slow literal
        (CALL)
        T,
      ELSE \ compile a fast literal
        pusht
        tosl ldiw
      THEN

      R>
      TO #LITS  \ restore the number of literals
      PUSHLIT   \ remember the latest literal
    THEN
[P]
;

: LITERAL ( n -- )
    (LIT) ;

: (2LIT)  ( d -- )
  SWAP (LIT) (LIT)
;

: 2LITERAL ( d -- )
    (2LIT) ;

: E_2LITERAL
  -1 ABORT" Need two literals"
;

: E_LITERAL
  -1 ABORT" Need a literal"
;

\ Control flow

: T>MARK ( TOKEN -- ADDR TOKEN )
  THERE  SWAP ( ADDR TOKEN )
  2DUP EXECUTE
;

: T>RESOLVE ( ADDR TOKEN -- )
  THERE ( ADDR TOKEN HERE )
  SWAP ROT ( HERE TOKEN ADDR )
  COMPILE-TO EXECUTE
  NEW
;

: T<MARK ( -- ADDR )
  THERE
;

: T<RESOLVE
  EXECUTE
;

\ ============== assembly control flow

: if_z
  ['] brne T>MARK
;

: if_<
  ['] brge T>MARK
;

: if_u<
  ['] brsh T>MARK
;

: if_u>=
  ['] brlo T>MARK
;

: if_>=
  ['] brlt T>MARK
;

: if_<0
  ['] brpl T>MARK
;

: if_<>0
  ['] breq T>MARK
;

: if_c
  ['] brcc T>MARK
;

: then
  T>RESOLVE
;

: else
  >R >R
  ['] (JMP) T>MARK
  R> R> T>RESOLVE
;

: begin
   T<MARK
   NEW \ exclude optimization
;

: again
  ['] (JMP) T<RESOLVE
;

: while_<>0
  ['] breq T>MARK
;

: while_z
  ['] brne T>MARK
;

: repeat
  >R >R
  again
  R> R> T>RESOLVE
;

: until_<>0
  ['] brne T<RESOLVE
;

: until_=0
  ['] breq T<RESOLVE
;

: for
  begin
;

: next ( reg -- )
  dec
  until_<>0
;

\ ================= hi-level flow control

: IF HAS IF
  tosl tosh or
  popt
  if_<>0
;

: IFNOT
  tosl tosh or
  popt
  if_z
;

: THEN HAS THEN
  then
;

: ELSE HAS ELSE
  else
;

: BEGIN HAS BEGIN
  begin
;

: AGAIN HAS AGAIN
  again
;

: UNTIL HAS UNTIL
  tosh tosl or
  popt
  until_=0
;

: [UNTIL<>0] \ does not destroy TOS
  tosl tmpl mov
  tosh tmpl or
  until_<>0
;

: WHILE HAS WHILE
  tosl tosh or
  popt
  while_<>0
;

: WHILENOT
  tosl tosh or
  popt
  while_z
;

: REPEAT HAS REPEAT
  repeat
;

: (DO) ( -- ) \ compile DO
[F]
  QLIT2? IF
    QLIT1? IF   ( from and to values are literals )
      DEBUG3" DO from to"
      cbl pushw \ push the counter and the limit of the outer loop
      cntl pushw
      cbl  ldiw ( limit )
      cntl ldiw ( from value )
    ELSE ( only from value is a literal )
      DEBUG3" DO from"
      cbl pushw \ push the counter and the limit of the outer loop
      cntl pushw
      cntl ldiw ( from value )
      tosl cbl movw ( limit )
      popt
    THEN
  ELSE ( no literals )
    cbl pushw
    cntl pushw
    tosl cntl movw
    [y]+ cbh ld
    [y]+ cbl ld
    popt
  THEN
[P]
;

: DO HAS DO ( -- 0 t>mark -1 t<mark )
  (DO)
  NEW \ exclude optimization
  0
  ['] DROP T>MARK
  NEW \ exclude optimization
  -1
  T<MARK
;

: ?DO HAS ?DO ( -- 0 t>mark -1 t<mark )
  (DO)
  cntl cbl cp
  cnth cbh cpc
  0
  ['] breq T>MARK
  -1
  T<MARK
;

: T>RESOLVE_ALL ( 0 x1 y1 x2 y2 .. xn yn -1 -- ) \ resolve all marks
[F]
  -1 <> ABORT" DO..LOOP structure mismatch"
  BEGIN
    ?DUP
  WHILE
    T>RESOLVE
  REPEAT
[P]
;

: LOOP HAS LOOP \ compile loop
[F]
  1 cntl adiw           \ increment the counter
  cbl cntl cp
  cbh cnth cpc          \ over the limit?
  ['] brne T<RESOLVE
  T>RESOLVE_ALL
  cntl popw             \ pop the counter and the limit
  cbl popw
[P]
;

: +LOOP HAS +LOOP
[F]
  QLIT1? IF ( the increment is a literal? )
    DEBUG3" +LOOP"
    tmp1l ldiw            \ TODO: can we omit this and add to cnt directly?
    tmp1l cntl add        \ add the increment and the counter
    tmp1h cnth adc
  ELSE
    tosl cntl add         \ add the TOS to the counter
    tosh cnth adc
    tosl tmp1l movw       \ save the increment in tmp1
    popt                  \ drop the increment from the data stack
  THEN
[P]
  cntl zl movw
  cbl zl sub            \ counter - limit
  cbh zh sbc
  0x80 zh subi          \ counter - limit - 0х8000
  tmp1l zl cp           \ compare with the increment
  tmp1h zh cpc

  ['] brvc T<RESOLVE
  T>RESOLVE_ALL
  cntl popw             \ restore the counter and the limit for the outer loop
  cbl popw
;

: I HAS I
  pusht
  cntl tosl movw
;

: ALL>R ( -1 n1 n2 ... nx -- ) \ push all numbers until -1 to the return stack
         ( R: -- nx .. n1 -1 )
[F]
  R>
  -1 >R
  BEGIN
    SWAP DUP -1 <>
  WHILE
    >R
  REPEAT
  DROP >R
[P]
;

: ALLR> ( -- -1 n1 n2 ... nx ) \ pull all numbers until -1 from the return stack
         ( R: nx .. n1 -1 )
[F]
  -1
  R>
  BEGIN
    R> SWAP OVER
    -1 =
  UNTIL
  >R DROP
[P]
;

: LEAVE HAS LEAVE
  ALL>R
  ['] (JMP) T>MARK \ one more mark for resolving in LOOP, +LOOP
  ALLR>
;

: UNLOOP HAS UNLOOP
  cntl popw
  cbl  popw
;

\ ------------------------------ macros

: SET ( bits port -- )   \ port |= bits    set bits in port
 [F]
  QLIT2? IF ( port )
    QLIT1? IF   ( port bits )
      DEBUG3" SET bits port"
      0xFF AND DUP 0= IF 2DROP EXIT THEN \ mask is 0 - do nothing
      2DUP 1s 0x1 =
      SWAP >reg  ?port0
      AND IF \ one bit only and low port - use sbi
        LSB SWAP sbi
      ELSE
        DEBUG3" SET port"
        DUP 0xFF <> IF \ if mask is 0xFF, we don't need to read the port
            OVER ( p b p )
            zl _in
        THEN
        zl ori
        zl SWAP _out
      THEN
    ELSE
      E_2LITERAL
    THEN
  ELSE
    E_2LITERAL
  THEN
 [P]
;

: TOGGLE ( bits port -- )   \ port ^= bits
 [F]
  QLIT2? IF ( port )
    QLIT1? IF   ( port bits )
        DEBUG3" TOGGLE bits port"
        0xFF AND DUP 0= IF 2DROP EXIT THEN \ mask is 0 - do nothing
        OVER ( p b p )
        zl _in
        zh ldi
        zh zl eor
        zl SWAP _out
    ELSE
      E_2LITERAL
    THEN
  ELSE
    E_2LITERAL
  THEN
 [P]
;

: MASK ( bits port -- )   \ port &= bits
 [F]
  QLIT2? IF ( port )
    QLIT1? IF   ( port bits )
        DEBUG3" MASK bits port"
        0xFF AND DUP 0= IF 2DROP EXIT THEN \ mask is 0 - do nothing
        OVER ( p b p )
        zl _in
        zl andi
        zl SWAP _out
    ELSE
      E_2LITERAL
    THEN
  ELSE
    E_2LITERAL
  THEN
 [P]
;

: CLEAR ( bits port -- )  \ port &= ~bits
 [F]
  QLIT2? IF ( port )
    QLIT1? IF   ( port bits )
      DEBUG3" CLEAR bits port"
      0xFF AND DUP 0= IF 2DROP EXIT THEN \ mask is 0 - do nothing
      2DUP 1s 0x1 =
      SWAP >reg  ?port0
      AND IF \ one bit only and low port - use сbi
        LSB SWAP cbi
      ELSE
        DEBUG3" CLEAR port"
        OVER ( p b p )
        zl _in
        [F] INVERT [P] 0xFF AND
        zl andi
        zl SWAP _out
      THEN
    ELSE
      E_2LITERAL
    THEN
  ELSE
    E_2LITERAL
  THEN
 [P]
;

\ ===============================================
: 1- HAS 1- ( n -- n-1 )
  1 tosl sbiw
;

: 1+ HAS 1+ ( n -- n+1 )
  1 tosl adiw
;

: 2+ HAS 2+ ( n -- n+2 )
  2 tosl adiw
;

: 2- HAS 2- ( n -- n-2 )
  2 tosl sbiw
;

: CELL+ HAS CELL+
  TCELL tosl adiw
;

: CELL- HAS CELL-
  TCELL tosl sbiw
;

: DUP HAS DUP
  pusht
;

: DROP HAS DROP
  popt
;

: NIP HAS NIP      ( x1 x2 -- x1 )                 ( discard the 2nd item on stack)
  0x2 yl adiw
;

: U2/ HAS U2/      ( x1 -- x2 )                 \   ( logical right shift one bit)
  tosh lsr
  tosl ror
;

: 2/ HAS 2/        ( x1 -- x2 )                 \   ( arithmetic right shift one bit)
  tosh asr
  tosl ror
;

: 2* HAS 2*        ( x1 -- x2 )                 \   ( logical left shift one bit)
  tosl lsl
  tosh rol
;

: NIBBLE-SWAP      ( x1 -- x2 )
  tosl swap
;

: CELLS  ( x1 -- x2 )                 \   ( multiply by cell size)
[F]
  T-STATE @ IF \ compilation
      QLIT1? IF \ literal
        DEBUG3" CELLS"
        TCELL * (LIT)
      ELSE
        tosl lsl
        tosh rol
      THEN
  ELSE
    TCELL *
  THEN
[P]
;

: CHAR+ HAS CHAR+  ( n -- n+1 )
  1 tosl adiw
;

: CHARS HAS CHARS  ( x1 -- x2 )
;

: INVERT HAS INVERT  ( x -- ~x )                     ( bitwise invert TOS )
[F]
  QLIT1? IF
    DEBUG3" INVERT"
    INVERT (LIT)
  ELSE
    tosl com
    tosh com
  THEN
[P]
;

: HI         ( x -- hi[x] )                     ( return high byte )
  tosh tosl mov
  tosh clr
;

: LO         ( x -- low[x] )                     ( return low byte )
  tosh clr
;

: REBOOT     ( -- )       ( reset the device )
  0x0 jmp
;

: EXIT HAS EXIT
  ret
;
