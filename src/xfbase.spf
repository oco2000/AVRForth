\ BASIC CROSS FORTH DEFINITIONS

VARIABLE T-STATE        \ target compiler state, 1 - compilation
T-STATE 0!              \ execution

: ?TEXEC
  T-STATE @ ABORT" For execution only" ;

: ?TCOMP
  T-STATE @ 0= ABORT" For compilation only" ;

: HAS ( redefined words )
  \ if not in target compilation mode, execute the redefined (old) word
  \ for macros only
  POSTPONE T-STATE
  POSTPONE @
  POSTPONE 0=
  POSTPONE IF
  ' COMPILE,
  POSTPONE EXIT
  POSTPONE THEN
; IMMEDIATE

: [T] ALSO TARGET ; IMMEDIATE   \ add TARGET to the search order
: [P] PREVIOUS  ;  IMMEDIATE    \ go back
: [F] ALSO FORTH  ; IMMEDIATE   \ add FORTH to the search order

S" src/inline.spf" INCLUDED

ALSO FORTH
\ search: FORTH, TARGET
\ new words in TARGET

: T[ 0 T-STATE ! ;  \ target compilation off
: ]T 1 T-STATE ! ;  \ target compilation on


: MACRO: : ;                        \ Macro - simple forth definition
: ;MACRO POSTPONE ; ; IMMEDIATE

\ Copy some words from FORTH wordlist to TARGET
: [[ POSTPONE [ ; IMMEDIATE
: ]] ] ;
: :: : ;
: ;; POSTPONE ; ; IMMEDIATE
: INCLUDED   INCLUDED ;
: REQUIRE    REQUIRE ;
: \EOF    \EOF ;
: CHAR    CHAR ;
: FCONST  CONSTANT ;
: .STACK  .S ;
: H.      H. ;
: BASE@   BASE @ ;
: @DECIMAL   BASE@ DECIMAL ;
: @HEX       BASE@ HEX ;
: @BINARY    BASE@ 2 BASE ! ;
: BASE!   BASE ! ;
: WORDS   WORDS ;
: ORDER   ORDER ;
: \   POSTPONE \ ; IMMEDIATE
: (   POSTPONE ( ; IMMEDIATE    \ )
: TO  POSTPONE TO ; IMMEDIATE
: S"  POSTPONE S" ;    \ "
: [IF]     POSTPONE [IF] ; IMMEDIATE
: [ELSE]   POSTPONE [ELSE] ; IMMEDIATE
: [THEN]   POSTPONE [THEN] ; IMMEDIATE
: [IFDEBUG] POSTPONE [IFDEBUG] ; IMMEDIATE
: [IFDEBUG1] POSTPONE [IFDEBUG1] ; IMMEDIATE
: [IFDEBUG2] POSTPONE [IFDEBUG2] ; IMMEDIATE
: [IFDEBUG3] POSTPONE [IFDEBUG3] ; IMMEDIATE
: ?DEBUG   ?DEBUG ;
: +DEBUG   POSTPONE +DEBUG ; IMMEDIATE
: +DEBUG1   POSTPONE +DEBUG1 ; IMMEDIATE
: +DEBUG2   POSTPONE +DEBUG2 ; IMMEDIATE
: +DEBUG3   POSTPONE +DEBUG3 ; IMMEDIATE
: -DEBUG   POSTPONE -DEBUG ; IMMEDIATE
: DEBUG"   POSTPONE DEBUG" ; IMMEDIATE
: DEBUG1"   POSTPONE DEBUG1" ; IMMEDIATE
: DEBUG2"   POSTPONE DEBUG2" ; IMMEDIATE
: DEBUG3"   POSTPONE DEBUG3" ; IMMEDIATE

: [ 0 T-STATE ! ; IMMEDIATE \ target compilation off
: ] 1 T-STATE ! ; IMMEDIATE \ target compilation on

: TCOMPILE, ( CFA -- )  \ compile a word
  (CALL)          \ compile it as a call
;

: DORG     ( addr -- )  \ set current address in RAM
  DUP RAM-TOP RSTACK-SIZE - > ABORT" Data is too large to fit in RAM"
  D-HERE ! ;

: DHERE D-HERE @ ; \ get current RAM address
: ALLOT DHERE + DORG ; \ allocate space in RAM

200 NewStack VALUE AIStack \ autoinclusion stack for saving the input

: SAVE-INPUT ( -- ) \ save current input to the autoinclusion stack
  DEPTH SAVE-INPUT >R
  T-STATE @ THERE DHERE EHERE
  R> 4 +
  AIStack Array>Stack
  AIStack >Stack
;

: RESTORE-INPUT ( -- depth ) \ restore current input from the autoinclusion stack
  AIStack Stack> >R
  AIStack ArrayStack>
  >R
  EORG DORG ORG T-STATE !
  R> 4 - RESTORE-INPUT
  0 >IN ! \ go to the start of the line
  R>
;

: DROP-SAVED-INPUT ( -- ) \ drop the last saved input
  AIStack StackDrop AIStack ArrayStackDrop
;

: COLON-WORD ( -- ) \ create a colon definition
  CREATE THERE , INLISTING , ]T (PROLOG) \ store the address
;

\ TARGET colon definition
\ if in TARGET-compilation, compile the definition
: :
  [T] SAVE-INPUT [P]
  COLON-WORD
  DOES> ?TCOMP @ TCOMPILE,  \ compile
;

: CALL-ONLY:   \ same as colon, but doesn't optimize tail recursion
  [T] SAVE-INPUT [P]
  COLON-WORD
  DOES> ?TCOMP @ TCOMPILE, NEW  \ compile and reset
;

: ;
  DROP-SAVED-INPUT
  (EPILOG) T[
;   \ end the colon definition

: LCONST ( n -- | -- n )    \ constant as a literal, only for compilation mode
  CREATE , DOES> ?TCOMP @ (LIT)
;
\ ============= constant, extended version
\ compilation - compile as a literal
\ execution - get the value
: == ( n -- | -- n ) \ CONSTANT
  CREATE , DOES> @
  T-STATE @ IF
    (LIT)
  THEN
;

: CONSTANT == ;

: 2== ( d -- | -- d ) \ 2CONSTANT
  CREATE , , DOES> 2@
  T-STATE @ IF
    (2LIT)
  THEN
;

: 2CONSTANT 2== ;

0x0         == FALSE
0xFFFF      == TRUE
0x20        == BL
TCELL       == CELL

\ ========================= some defining words
: TCREATE    THERE [T] == [P] ; \ ROM address as a constant
: RCREATE    DHERE [T] LCONST [P] ; \ RAM address as a constant (only for compilation time)
: ECREATE    EHERE [T] == [P] ;  \ EEPROM address as a constant
: VARIABLE   [T] RCREATE CELL ALLOT [P] ;    \ variable in RAM
: EVARIABLE  [T] ECREATE CELL EALLOT [P] ;   \ variable in EEPROM
: CVARIABLE  [T] RCREATE 1 ALLOT [P] ;    \ 1 byte variable in RAM
: CEVARIABLE [T] ECREATE 1 EALLOT [P] ;   \ 1 byte variable in EEPROM
: 2VARIABLE   [T] RCREATE 2 CELLS ALLOT [P] ; \ double variable in RAM
: 2EVARIABLE [T] ECREATE 2 CELLS EALLOT [P] ; \ souble variable in EEPROM

VARIABLE @DOVAR
VARIABLE @DOVECT

: EXTENDABLE \ include DOES> part for variables
  ?TEXEC
  S" (DOVAR)" TREQUIRED
;

: ?DOVAR \ if DOVAR is not included yet, include it
  @DOVAR @ 0= IF
    DEBUG3" Include DOVAR"
    EXTENDABLE
  THEN
;

: PCREATE \ defining word with parameters in ROM
  ?DOVAR
  CREATE
    THERE ,                      \ store ROM address
    ]T (PROLOG) @DOVAR @ (CALL) T[  \ compile DOVAR
  DOES> @
    T-STATE @ IF
      TCOMPILE,                     \ compile
    ELSE TCELL + THEN
;

: (PDOES>)
  R> DUP CELL+ >R @       \ where to compile DOES> part
  LATEST NAME> >BODY @    \ addr of the latest word in TARGET
  ['] (CALL) >COMPILE-TO  \ compile
;

: PDOES>
  [T] SAVE-INPUT [P]
  POSTPONE (PDOES>)   \ compile (PDOES>)
  THERE ,             \ and the current address
  POSTPONE [[         \ execution mode
  ]T (PROLOG)         \ target compilation
    pusht
    tosl popw   \ pfa
    tosl lsl    \ return address is in words, do multiply by 2
    tosh rol
; IMMEDIATE

: CREATE \ defining word with parameters in RAM
  CREATE
    THERE ,                      \ current address
    DHERE [T] (LIT) ret [P]
  DOES> ?TCOMP @ TCOMPILE,       \ compile
;

: (DOES>)
    R> DUP CELL+ >R @       \ where to compile DOES> part
    LATEST NAME> >BODY @    \ addr of the latest word in TARGET
    LITSIZE +               \ skip the literal
    ['] (JMP) >COMPILE-TO   \ go to DOES> part
;

: DOES>
    [T] SAVE-INPUT [P]
    POSTPONE (DOES>)    \ compile (DOES>)
    THERE ,             \ and the current address
    POSTPONE [[         \ execution mode
    ]T (PROLOG)         \ target compilation
; IMMEDIATE

\ ---------------------------------------------------------------
\ Numbers

: BALANCE ( olddepth -- ) \ truncate the stack to the olddepth
  DEPTH 1- - DUP 0< IF NEGATE NDROP ELSE DROP THEN
;

: NOTFOUND ( a u -- ) \ called by SP-Forth if the word is not found
  T-STATE @ 0= IF \ execution
    ?SLITERAL
  ELSE \ compilation
    2DUP SEARCH_FILENAME ?DUP IF \ can be auto-included
      2DROP
      [IFDEBUG3]  2DUP ." Autoinclude: " TYPE CR [THEN]
      2>R
      [T] RESTORE-INPUT [P] BALANCE 2R>
      NEW \ reset optimizations
      TREQUIRED
    ELSE \ number?
      DEPTH 2 - >R
      ?SLITERAL
      DEPTH R> - DUP 1 = IF \ literal
        DROP
        (LIT)
      ELSE
        2 = IF \ double literal
          D>S  DUP
          0xFFFF AND (LIT)
          0x10 RSHIFT 0xFFFF AND (LIT)
        THEN
      THEN
    THEN
  THEN
; IMMEDIATE

\ =============== vectors

: [VECT] ( a -- ) \ вектор
  CREATE
    THERE , INLISTING ,
    (UJMP)
    ROM-SIZE 8192 > IF
      nop      \ reserve 2 bytes, we may need a long jump
    THEN
  DOES> ?TCOMP @ (CALL)
;

: [->] ( a "vect" ) \ set a vector (example: ' word [->] vect
  ' >BODY
  @ COMPILE-TO (JMP)
;

\ ================== bits
: BITS{  ( -- t-state -1 )  \ start a mask
  T-STATE @ -1 T[  \ store t-state and go turn off the compilation
;

: }BITS  ( t-state -1 a b c ... -- mask | )   \ end a mask
  0 BEGIN
    OVER -1 <>
  WHILE
    SWAP EXP2 OR
  REPEAT
  NIP SWAP DUP T-STATE !
  IF (LIT) THEN     \ compile a literal if in the compilation mode
;

: BIT               \ separate bit
  T-STATE @ IF \ compilation
    QLIT1? IF   ( n )
      DEBUG3" BIT"
      EXP2
      (LIT) \ compile the mask as a literal
    ELSE
      E_LITERAL
    THEN
  ELSE \ put the mask onto the data stack
    EXP2
  THEN
;

\ =================== strings

: [CHAR]  ( "c" -- ) \ compile next char as a literal
  CHAR (LIT)
;

: C"    ( "string" -- c-addr )  \ compile a counted string to ROM
  [CHAR] " WORD           ( t )
  COUNT SWAP OVER         ( u a u )
  THERE DUP >R T-ADDR     ( u a u here )
  2DUP C!                 \ счетчик
  1+ SWAP CMOVE           ( u )   \ строка
  1+ TALLOT TALIGN        \ зарезервировали
  R>
;

\ other
: [']  ( "word" -- ) \ compile the address of the next word as a literal
  ?TCOMP ' >BODY @ (LIT)
;

: '  ( "word" -- addr ) \ get the address of the next word
  ?TEXEC ' >BODY @
;

PREVIOUS
