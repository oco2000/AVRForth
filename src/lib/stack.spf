\ Stacks

: FRAME ( # --> [frame] # ) >R SP@ R@ CELLS - SP! R> ;

 0 \ stack structure
   CELL -- StackTop
   CELL -- StackBottom
 CONSTANT /NStack

\ stack size for n cells in bytes
: StackSize ( n --> u ) CELLS /NStack + ;

\ initialize stack with depth
: StackInit ( depth stack --> )
  TUCK >R StackSize + DUP
  R@ StackBottom !
  R> StackTop ! ;

\ stack pointer addr
: StackPointer ( stack --> addr ) StackTop @ ;

\ stack depth in cells
: StackDepth ( stack --> n ) DUP StackBottom @ SWAP StackPointer - CELL / ;

\ check if stack pointer in inside the stack
: ?StackBalanced ( stack --> flag )
  DUP StackPointer OVER StackBottom @ 1+ ROT /NStack + SWAP WITHIN ;

\ get the top element
: Stack@ ( stack --> n ) StackPointer @ ;

\ move pointer by u cells
: StackMovePointer ( u stack --> ) SWAP CELLS NEGATE OVER StackTop +! ?StackBalanced INVERT THROW ;

\ get nth element from stack
: StackPick ( n Stack --> x ) StackPointer SWAP CELLS + @ ;

: .Stack ( stack -- )
  >R CR
    R@ StackDepth ." Stack depth: " .
    ."   Stack: "
    R@ StackDepth 0= IF
      ." empty"
    ELSE
      R@ 0 R@ StackDepth 1- ?DO I OVER StackPick . -1 +LOOP DROP
    THEN
  RDROP
;

\ drop
: StackDrop ( stack --> ) -1 SWAP StackMovePointer ;

\ from stack to data stack
: Stack> ( stack --> n ) DUP Stack@ SWAP StackDrop ;

\ from data stack to stack
: >Stack ( n stack --> ) DUP 1 SWAP StackMovePointer StackPointer ! ;

\ copy n elements a,b,c,,x from data stack to stack
: StackCopyTo ( [ a b c .. x ] n stack --> )
         2DUP StackMovePointer
         OVER >R
          StackPointer >R CELLS >R SP@ 2R> CMOVE
         R> DROP ;

\ move n elements from data stack to stack
: N>Stack ( [ a b c .. x ] # stack --> ) OVER >R StackCopyTo R> NDROP ;

\ move n elements from data stack to stack with the length n
: Array>Stack ( [ a b c ... x ] n stack --> )
  2DUP 2>R   N>Stack
       2R>   >Stack
;

\ copy n elements from stack to data stack
: StackGetFrom ( n stack --> a b c .. x )
          StackPointer SWAP 2>R
          R@ FRAME >R SP@ R> SWAP
          2R> CELLS >R SWAP R> CMOVE DROP ;

\ move n elements from stack to data stack
: NStack> ( n stack --> a b c .. x )
  2DUP 2>R StackGetFrom
       2R> SWAP NEGATE SWAP StackMovePointer
;

\ move elements from stack to data stack
\ number of elements is on top of stack
: ArrayStack> ( stack --> a b c .. x # )
  DUP Stack> DUP >R SWAP NStack> R>
;

\ delete elements from stack
\ number of elements is on top of stack
: ArrayStackDrop ( stack --> )
  ArrayStack> NDROP
;

\ create a stack in the heap
: NewStack ( depth --> stack ) DUP StackSize ALLOCATE THROW TUCK StackInit ;

\ free stack
: FreeStack ( stack --> ) FREE THROW ;

\EOF -- tests ---------------------------------------

TESTCASES Stack

      (( .S CR 20 NewStack .S CR FreeStack -> ))
      (( 20 NewStack DUP ?StackBalanced SWAP FreeStack -> TRUE ))

      (( 20 NewStack VALUE stack -> ))

      (( 123 stack >Stack stack ?StackBalanced -> TRUE ))
      (( 234 stack >Stack stack ?StackBalanced -> TRUE ))
      (( 345 stack >Stack stack ?StackBalanced -> TRUE ))
      (( 456 stack >Stack stack ?StackBalanced -> TRUE ))
      (( 567 stack >Stack stack ?StackBalanced -> TRUE ))
      (( 567 stack >Stack stack ?StackBalanced -> TRUE ))
      (( -1 stack StackMovePointer -> ))
      (( stack Stack@ -> 567 ))
      (( stack Stack> -> 567 ))
      (( stack Stack> -> 456 ))
      (( stack StackDepth -> 3 ))
      (( stack Stack> DROP stack Stack> DROP stack Stack> DROP stack ?StackBalanced -> TRUE ))
      (( 1 2 3 4 5 5 stack N>Stack stack .Stack -> ))
      (( 1 2 3 4 5 5 stack Array>Stack stack .Stack -> ))
      (( stack ArrayStack> stack .Stack -> 1 2 3 4 5 5 ))
      (( 5 stack NStack> stack .Stack -> 1 2 3 4 5 ))
      (( stack StackDepth -> 0 ))
      (( 1 2 3 4 5 5 stack Array>Stack -> ))
      (( stack ArrayStackDrop -> ))
      (( stack StackDepth -> 0 ))
      (( stack ' StackDrop CATCH -> -1 -1 ))
      (( 1 stack StackMovePointer stack .Stack -> ))
      (( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 stack N>Stack stack .Stack -> ))
      (( 1 stack ' >Stack CATCH -> 1 stack -1 ))
      (( stack FreeStack -> ))

END-TESTCASES
