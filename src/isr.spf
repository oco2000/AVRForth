\ Interrupt service routines

\ interrupts with the minimal registers saved in the return stack
: (ASMINTPROLOG)
  tosl    pushw \ push TOS
  [ SREG ] LITERAL tosl lds
  tosl    push  \ and SREG
;

: (ASMINTEPILOG)  \ restore SREG and TOS
  tosl    pop
  tosl [ SREG ] LITERAL sts
  tosl    popw
          reti
;

: ASMINT: CREATE THERE , INLISTING , ]T (ASMINTPROLOG)   \ create an interrupt handler in assembly
     DOES> @ T-STATE @ IF (CALL) THEN  ;
: ;ASMINT (ASMINTEPILOG) T[ ;           \ end of the handler

\ Forth interrupt - save more registers
: (INTPROLOG)
  tosl  pushw   \ TOS
  wl    pushw   \ temporary registers
  zl    pushw
  tmpl  pushw
  cbl   pushw
  tmp1l pushw
  tmp2l pushw
  [ SREG ] LITERAL tosl lds
  tosl    push  \ SREG
;

: (INTEPILOG) \ restore all
  tosl  pop
  tosl [ SREG ] LITERAL sts
  tmp2l popw
  tmp1l popw
  cbl   popw
  tmpl  popw
  zl    popw
  wl    popw
  tosl  popw
        reti
;

: INT: \ Forth interrupt handler
  [T] SAVE-INPUT [P]
  CREATE THERE , INLISTING , ]T (INTPROLOG)
  DOES> @ T-STATE @ IF (CALL) THEN  ;

: ;INT
  DROP-SAVED-INPUT
  (INTEPILOG) T[ ;           \ end of the handler

: INTERRUPT         \ describe an interrupt vector at the currend address
  CREATE
    THERE , INLISTING ,
    reti            \ uninitialized - return from interrupt
    VECTOR-SIZE 4 = IF      \ 4-byte vectors?
        0x0 T,              \ reserve 2 bytes
    THEN
  DOES>
    T-STATE @ IF
      (CALL)          \ compile call to the vector
    ELSE
      @               \ just get the address
    THEN
;

: INT! ( addr vector -- )  \ set a vector to address addr
  COMPILE-TO (JMP)
;

: ->INT   \ set a handler ( example: ' Handler ->INT Vector )
  ?TEXEC   ' >BODY @   INT!
;
